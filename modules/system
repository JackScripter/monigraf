#!/usr/bin/env python3
import re
import time
import sys
import configparser
import socket
import subprocess
import psutil
from ES import ES

config = configparser.ConfigParser()
config.read('/etc/monigraf/monigraf.ini')
host = socket.gethostname()

def Check():
    # Temperature sensors
    sensorTemp = psutil.sensors_temperatures()
    sensorDevice = sensorTemp.keys()        # Get elements that provides temp.
    # Loop through each element and retrieve values
    for sensor in sensorDevice:
        data = {}
        data['sensor'] = sensor
        for i in range(len(sensorTemp[sensor])):
            sensorLabel = sensorTemp[sensor][i].label
            if sensorLabel is "": sensorLabel = "Unknown_Sensor_Label"
            data['value'] = float(sensorTemp[sensor][i].current)
            data['name'] = sensorLabel
        dbinfo.add_listdata("sensors", data)
    # CPU Usage
    data = {}
    cpuUsage = psutil.cpu_percent(percpu=True)
    for i in range(len(cpuUsage)):
        data = {}
        data['core'] = str(i)
        data['value'] = float(cpuUsage[i])
        dbinfo.add_listdata("cpu_usage", data)
    # Memory Usage
    data = {}
    memUsage = psutil.virtual_memory()
    for i in range(len(memUsage)):
        data['total'] = int(memUsage[0])
        data['available'] = int(memUsage[1])
        data['used'] = int(memUsage[3])
        data['free'] = int(memUsage[4])
        data['active'] = int(memUsage[5])
        data['inactive'] = int(memUsage[6])
        data['buffers'] = int(memUsage[7])
        data['cached'] = int(memUsage[8])
        data['shared'] = int(memUsage[9])
        data['slab'] = int(memUsage[10])
    dbinfo.add_listdata("mem_usage", data)
    # Filesystem Usage
    mountList = psutil.disk_partitions()
    for i in range(len(mountList)):
        data = {}
        data['mountpoint'] = mountList[i].mountpoint
        data['total'] = psutil.disk_usage(data['mountpoint']).total
        data['used'] = psutil.disk_usage(data['mountpoint']).used
        dbinfo.add_listdata("filesystem", data)

def Refresh():
    lscpuOut = ' '.join(subprocess.run(['/usr/bin/lscpu'], stdout=subprocess.PIPE).stdout.decode('utf-8').split(' '))       # Get more info about CPU.
    data = {}
    # Parse CPU infos
    for line in cpuInfos.splitlines():
        if re.search('ID:', line): data['cpu_id'] = line.split(': ')[1].replace(' ', '')
        elif re.search('Family:', line): data['cpu_family'] = line.split(': ')[1]
        elif re.search('Version:', line): data['cpu_model'] = line.split(': ')[1]
        elif re.search('Upgrade:', line): data['cpu_socket'] = line.split(': ')[1]
    l3cache = "-"   # Default value if L3 cache is not provided
    for line in lscpuOut.splitlines():
        if re.search('^CPU\(s\):', line): data['cpu_total_core'] = line.split(': ')[1].replace(' ', '')
        elif re.search('L1d cache:', line): data['cpu_L1_cache'] = line.split(': ')[1].replace(' ', '')
        elif re.search('L2 cache:', line): data['cpu_L2_cache'] = line.split(': ')[1].replace(' ', '')
        elif re.search('L3 cache:', line): l3cache = line.split(': ')[1].replace(' ', '')
    if l3cache is "": l3cache = "-"
    data['cpu_L3_cache'] = l3cache
    # Parse Motherboard infos
    for line in moboInfos.splitlines():
        if re.search('Manufacturer:', line): data['mobo_manufacturer'] = line.split(': ')[1]
        elif re.search('Product Name:', line): data['mobo_model'] = line.split(': ')[1]
        elif re.search('Version:', line): data['mobo_version'] = line.split(': ')[1]
        elif re.search('Serial Number:', line): data['mobo_serial_number'] = line.split(': ')[1]
    # Parse memory infos
    for line in memInfos.splitlines():
        if re.search('Size:', line): data['mem_size'] = line.split(': ')[1]
        elif re.search('Form Factor:', line): data['mem_form_factor'] = line.split(': ')[1]
        elif re.search('Bank Locator:', line): data['mem_location'] = line.split(': ')[1]
        elif re.search('Type:', line): data['mem_type'] = line.split(': ')[1]
        elif re.search('Speed:', line): data['mem_speed'] = line.split(': ')[1]
        elif re.search('Serial Number:', line): data['mem_serial_number'] = line.split(': ')[1]
        elif re.search('Part Number:', line): data['mem_part_number'] = line.split(': ')[1]
    dbinfo.add_listdata("system", data)

cpuInfos = ' '.join(subprocess.run(['/usr/sbin/dmidecode', '-t', '4'], stdout=subprocess.PIPE).stdout.decode('utf-8').split(' '))
moboInfos = ' '.join(subprocess.run(['/usr/sbin/dmidecode', '-t', '2'], stdout=subprocess.PIPE).stdout.decode('utf-8').split(' '))
memInfos = ' '.join(subprocess.run(['/usr/sbin/dmidecode', '-t', '17'], stdout=subprocess.PIPE).stdout.decode('utf-8').split(' '))
if sys.argv[1] == "refresh":
    dbinfo = ES.ES("monigraf-inventory")
    dbinfo.create_list("system")
    Refresh()
    dbinfo.add_data("host", host)
    dbinfo.send()
    exit()

while True:
    dbinfo = ES.ES("monigraf-system")
    dbinfo.create_list("sensors")
    dbinfo.create_list("cpu_usage")
    dbinfo.create_list("mem_usage")
    dbinfo.create_list("filesystem")
    Check()
    dbinfo.add_data("host", host)
    dbinfo.send()
    time.sleep(config.getint('system','delay'))
