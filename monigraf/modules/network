#!/usr/bin/python3.7
import re
import time
import sys
import configparser
import ast
import socket
import subprocess
import psutil
import netifaces
from BodyBuilder import BodyBuilder

config = configparser.ConfigParser()
config.read('/etc/monigraf/monigraf.ini')
host = socket.gethostname()

def GetDevices():
    if config['network']['interfaces'] == "all":
        listNet = netifaces.interfaces()            # Get network interfaces
        listNet.remove('lo')                        # Remove loopback interface. Don't want statistic from this one.
    else:
        listNet = config['network']['interfaces']
    return listNet

def Check(net):
    txpath = "/sys/class/net/" + net + "/statistics/tx_bytes"
    rxpath = "/sys/class/net/" + net + "/statistics/rx_bytes"
    macaddr = netifaces.ifaddresses(net)[netifaces.AF_LINK][0]['addr']
    rx_read = open(rxpath, 'r'); tx_read = open(txpath, 'r')
    rx_bytes_last = rx_read.read(); tx_bytes_last = tx_read.read()
    rx_read.close(); tx_read.close()
    # Have to close everytime because the second value will be null.
    time.sleep(1)
    rx_read = open(rxpath, 'r'); tx_read = open(txpath, 'r')
    rx_bytes_now = rx_read.read(); tx_bytes_now = tx_read.read()
    rx_read.close(); tx_read.close()
    rx_bytes = int(float(rx_bytes_now)) - int(float(rx_bytes_last))  # Calculate average bytes per seconds.
    tx_bytes = int(float(tx_bytes_now)) - int(float(tx_bytes_last))     # Calculate average bytes per seconds.
    dbinfo.add_tag("mac", macaddr)
    dbinfo.add_field("rx_bytes", float(rx_bytes))
    dbinfo.add_field("tx_bytes", float(tx_bytes))
    dbinfo.Add()

def Refresh():
    dbinfo.Delete()
    #influx -host $influxserver -username $userdb -password $password -database $dbname -execute "DELETE FROM network_info WHERE host = $HOSTNAME"
    for net in ast.literal_eval(listNet):
        dev = subprocess.run(['/usr/bin/lspci'], stdout=subprocess.PIPE).stdout.decode('utf-8')
        for line in dev.splitlines():
            if re.search('Ethernet', line):
                idKern = line.split(' ')[0]
                devInfos = subprocess.run(['/usr/bin/lspci', '-v', '-s', idKern], stdout=subprocess.PIPE).stdout.decode('utf-8')
                for info in devInfos.splitlines():
                    if re.search('Subsystem:', info): controller = info.split(': ')[1]
                    elif re.search('driver', info): driver = info.split(': ')[1]
        macaddr = netifaces.ifaddresses(net)[netifaces.AF_LINK][0]['addr']  # Retrieve MAC address
        speed = psutil.net_if_stats()[net][2]   # Interface Speed
        duplex = str(psutil.net_if_stats()[net][1]).split('_')[2]   # Duplex mode
        mtu = psutil.net_if_stats()[net][3] # MTU
        dbinfo.add_field("mac", macaddr)
        dbinfo.add_field("speed", speed)
        dbinfo.add_field("duplex", duplex)
        dbinfo.add_field("controller", controller)
        dbinfo.add_field("driver", driver)
        dbinfo.add_field("dev", net)
        dbinfo.add_field("mtu", mtu)
        dbinfo.Add()
        #influx -host $influxserver -username $userdb -password $password -database $dbname -execute "INSERT network_info,host=$HOSTNAME mac=\"$macaddr\",speed=\"$speed\",duplex=\"$duplex\",mtu=\"$mtu\",controller=\"$controller\",driver=\"$driver\",dev=\"$net\""

listNet = GetDevices()
if sys.argv[1] == "refresh":
    dbinfo = BodyBuilder.BuildBody("network_info", host)
    Refresh()
    exit()

dbinfo = BodyBuilder.BuildBody("network", host)
while True:
    for net in ast.literal_eval(listNet):
        Check(net)
    time.sleep(config.getint('network','delay'))
